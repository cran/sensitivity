// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DisC2_Crossprod
double DisC2_Crossprod(NumericVector X, int d);
RcppExport SEXP _sensitivity_DisC2_Crossprod(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisC2_Crossprod(X, d));
    return rcpp_result_gen;
END_RCPP
}
// DisC2_Rowprod
double DisC2_Rowprod(NumericVector x, int d);
RcppExport SEXP _sensitivity_DisC2_Rowprod(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisC2_Rowprod(x, d));
    return rcpp_result_gen;
END_RCPP
}
// DisL2_Crossprod
double DisL2_Crossprod(NumericVector X, int d);
RcppExport SEXP _sensitivity_DisL2_Crossprod(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisL2_Crossprod(X, d));
    return rcpp_result_gen;
END_RCPP
}
// DisL2_Rowprod
double DisL2_Rowprod(NumericVector x, int d);
RcppExport SEXP _sensitivity_DisL2_Rowprod(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisL2_Rowprod(x, d));
    return rcpp_result_gen;
END_RCPP
}
// DisL2star_Crossprod
double DisL2star_Crossprod(NumericVector X, int d);
RcppExport SEXP _sensitivity_DisL2star_Crossprod(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisL2star_Crossprod(X, d));
    return rcpp_result_gen;
END_RCPP
}
// DisM2_Crossprod
double DisM2_Crossprod(NumericVector X, int d);
RcppExport SEXP _sensitivity_DisM2_Crossprod(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisM2_Crossprod(X, d));
    return rcpp_result_gen;
END_RCPP
}
// DisM2_Rowprod
double DisM2_Rowprod(NumericVector x, int d);
RcppExport SEXP _sensitivity_DisM2_Rowprod(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisM2_Rowprod(x, d));
    return rcpp_result_gen;
END_RCPP
}
// DisS2_Crossprod
double DisS2_Crossprod(NumericVector X, int d);
RcppExport SEXP _sensitivity_DisS2_Crossprod(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisS2_Crossprod(X, d));
    return rcpp_result_gen;
END_RCPP
}
// DisS2_Rowprod
double DisS2_Rowprod(NumericVector x, int d);
RcppExport SEXP _sensitivity_DisS2_Rowprod(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisS2_Rowprod(x, d));
    return rcpp_result_gen;
END_RCPP
}
// DisW2_Crossprod
double DisW2_Crossprod(NumericVector X, int d);
RcppExport SEXP _sensitivity_DisW2_Crossprod(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DisW2_Crossprod(X, d));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_indices
NumericVector cpp_get_indices(NumericMatrix& data, const IntegerMatrix& RP, const IntegerMatrix& I, IntegerVector& bootsample, int d);
RcppExport SEXP _sensitivity_cpp_get_indices(SEXP dataSEXP, SEXP RPSEXP, SEXP ISEXP, SEXP bootsampleSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RP(RPSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type I(ISEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type bootsample(bootsampleSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_indices(data, RP, I, bootsample, d));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_total_indices
NumericVector cpp_get_total_indices(NumericMatrix& data, IntegerVector& bootsample);
RcppExport SEXP _sensitivity_cpp_get_total_indices(SEXP dataSEXP, SEXP bootsampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type bootsample(bootsampleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_total_indices(data, bootsample));
    return rcpp_result_gen;
END_RCPP
}
// Compar_array
bool Compar_array(IntegerMatrix X, IntegerMatrix Y);
RcppExport SEXP _sensitivity_Compar_array(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Compar_array(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// maximin_cpp
double maximin_cpp(NumericMatrix X);
RcppExport SEXP _sensitivity_maximin_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(maximin_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// nested_permu_cplus
IntegerVector nested_permu_cplus(IntegerVector layers);
RcppExport SEXP _sensitivity_nested_permu_cplus(SEXP layersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type layers(layersSEXP);
    rcpp_result_gen = Rcpp::wrap(nested_permu_cplus(layers));
    return rcpp_result_gen;
END_RCPP
}
// nested_lhs_cplus
IntegerMatrix nested_lhs_cplus(int d, IntegerVector layers);
RcppExport SEXP _sensitivity_nested_lhs_cplus(SEXP dSEXP, SEXP layersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type layers(layersSEXP);
    rcpp_result_gen = Rcpp::wrap(nested_lhs_cplus(d, layers));
    return rcpp_result_gen;
END_RCPP
}

RcppExport void LG_estimator(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport void LG_rowsort(void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_sensitivity_DisC2_Crossprod", (DL_FUNC) &_sensitivity_DisC2_Crossprod, 2},
    {"_sensitivity_DisC2_Rowprod", (DL_FUNC) &_sensitivity_DisC2_Rowprod, 2},
    {"_sensitivity_DisL2_Crossprod", (DL_FUNC) &_sensitivity_DisL2_Crossprod, 2},
    {"_sensitivity_DisL2_Rowprod", (DL_FUNC) &_sensitivity_DisL2_Rowprod, 2},
    {"_sensitivity_DisL2star_Crossprod", (DL_FUNC) &_sensitivity_DisL2star_Crossprod, 2},
    {"_sensitivity_DisM2_Crossprod", (DL_FUNC) &_sensitivity_DisM2_Crossprod, 2},
    {"_sensitivity_DisM2_Rowprod", (DL_FUNC) &_sensitivity_DisM2_Rowprod, 2},
    {"_sensitivity_DisS2_Crossprod", (DL_FUNC) &_sensitivity_DisS2_Crossprod, 2},
    {"_sensitivity_DisS2_Rowprod", (DL_FUNC) &_sensitivity_DisS2_Rowprod, 2},
    {"_sensitivity_DisW2_Crossprod", (DL_FUNC) &_sensitivity_DisW2_Crossprod, 2},
    {"_sensitivity_cpp_get_indices", (DL_FUNC) &_sensitivity_cpp_get_indices, 5},
    {"_sensitivity_cpp_get_total_indices", (DL_FUNC) &_sensitivity_cpp_get_total_indices, 2},
    {"_sensitivity_Compar_array", (DL_FUNC) &_sensitivity_Compar_array, 2},
    {"_sensitivity_maximin_cpp", (DL_FUNC) &_sensitivity_maximin_cpp, 1},
    {"_sensitivity_nested_permu_cplus", (DL_FUNC) &_sensitivity_nested_permu_cplus, 1},
    {"_sensitivity_nested_lhs_cplus", (DL_FUNC) &_sensitivity_nested_lhs_cplus, 2},
    {"LG_estimator", (DL_FUNC) &LG_estimator, 10},
    {"LG_rowsort",   (DL_FUNC) &LG_rowsort,    5},
    {NULL, NULL, 0}
};

RcppExport void R_init_sensitivity(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, TRUE);
}
